import { createSlice } from "@reduxjs/toolkit";


export const loadWatchListState = () => {
  const watchListState = localStorage.getItem("watchListState");
  if(watchListState){
    return JSON.parse(watchListState) //converting our watchListState string back into an array
  } else {
    return initialState
  }
}

// set up our default slice data
// our global state that we are keeping track of
const initialState = {
  watchList: [],
  totalItems: 0,
};

// our slice allows us to define our reducer functions and then it will automatically set up actions for us to dispatch with the same name as our reducer functions
export const watchListSlice = createSlice({
  name: "watch list", //required
  initialState,
  /* Reducers - functions that modify our state
    -reducers take in both state and action as parameters
    -state refers to the current state
    -action refers to how we modify the state 
    */
  /* Actions - an object that describes how me modify our state.
   -actions consist of a type and a payload
   -the type includes the name of the reducer function to run (addItem for example)
   -type refers to the parameters we may pass in when we dispatch our action
   */
  reducers: {
    addItem: (state, action) => {
      // add a movie to our watch list

      // parameter that we passed in to our dispatched action is part of the payload
      const movie = action.payload;

      // returns undefined if we did not find item
      const foundItem = state.watchList.find((item) => item.id === movie.id);

      // if we did not find the item, don't add it to our list
      if (!foundItem) {
        // take the current watchlist in our state and add new movie to the end of our list
        state.watchList.push(movie);
        //*NOTE* - .push() ONLY works inside a Redux slice in React because of an underlying library in the redux-toolkit called Immer
        // Immer converts our state.watchList.push() to state.watchList = [...state.watchList,movie]

        state.totalItems += 1;
      } else {
        alert("Item already in watchlist");
      }

      // makes a copy of our current state watch list and adds new movie at the end
      // state.watchList = [...state.watchList,movie]
    },
    deleteItem: (state, action) => {
      const id = action.payload;

      //filter
      // if id is NOT equal to movie.id then add it to the resulting array
      const newState = state.watchList.filter((movie) => movie.id !== id);

      //overwrite current watchlist state with array we get back from filter
      state.watchList = newState;

      state.totalItems -= 1;
    },
  },
});

// actions generated by our createSlice
export const { addItem, deleteItem } = watchListSlice.actions;

export default watchListSlice.reducer;
